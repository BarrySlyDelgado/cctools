on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (for tar.gz names)'
        required: true
      tag:
        description: 'Tag to deploy'
        required: true

name: Create a new release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: ${{ format('cclnd/cctools-env:x86_64-{0}', matrix.os-name) }}
    timeout-minutes: 30
    env:
      GITHUB_DOCKER: yes
      CCTOOLS_OUTPUT: ${{ format('cctools-{0}-x86_64-{1}.tar.gz', github.event.inputs.version, matrix.os-name) }}
    strategy: 
      matrix:
        os-name: ['centos7', 'centos8', 'ubuntu20.04']
    steps:
      - name: checkout CCTools repo
        uses: actions/checkout@v2
        with:
          tag: $${{ github.event.inputs.tag }}
      - name: build
        run: ${GITHUB_WORKSPACE}/packaging/scripts/build.sh
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: true
          prerelease: true
      - name: deploy binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ format('/tmp/{0}', env.CCTOOLS_OUTPUT) }}
          asset_name: ${{ env.CCTOOLS_OUTPUT }}
          asset_content_type: application/gzip

  build-osx:
    runs-on: macos-10.15
    timeout-minutes: 30
    env:
      CCTOOLS_OUTPUT: ${{ format('cctools-{0}-x86_64-{1}.tar.gz', github.event.inputs.version, 'osx-10.15') }}
    steps:
      - name: checkout CCTools repo
        uses: actions/checkout@v2
      - name: build
        run: ${GITHUB_WORKSPACE}/packaging/scripts/build.sh
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: true
          prerelease: true
      - name: deploy binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ format('/tmp/{0}', env.CCTOOLS_OUTPUT) }}
          asset_name: ${{ env.CCTOOLS_OUTPUT }}
          asset_content_type: application/gzip

